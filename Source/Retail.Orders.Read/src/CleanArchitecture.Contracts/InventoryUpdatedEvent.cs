// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using InventoryUpdatedEventNameSpace;
//
//    var inventoryUpdatedEvent = InventoryUpdatedEvent.FromJson(jsonString);

namespace InventoryUpdatedEventNameSpace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class InventoryUpdatedEvent
    {
        /// <summary>
        /// Unique identifier of the customer who placed the order
        /// </summary>
        [JsonProperty("customerId")]
        public Guid CustomerId { get; set; }

        /// <summary>
        /// List of items in the order
        /// </summary>
        [JsonProperty("lineItems")]
        public LineItem[] LineItems { get; set; }

        /// <summary>
        /// Date and time when the order was created
        /// </summary>
        [JsonProperty("orderDate")]
        public DateTimeOffset OrderDate { get; set; }

        /// <summary>
        /// Unique identifier of the order
        /// </summary>
        [JsonProperty("orderId")]
        public Guid OrderId { get; set; }

        /// <summary>
        /// Total amount of the order
        /// </summary>
        [JsonProperty("totalAmount")]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double TotalAmount { get; set; }
    }

    public partial class LineItem
    {
        /// <summary>
        /// Quantity of the product
        /// </summary>
        [JsonProperty("qty")]
        public long Qty { get; set; }

        /// <summary>
        /// Unique identifier of the product SKU
        /// </summary>
        [JsonProperty("skuId")]
        public Guid SkuId { get; set; }

        /// <summary>
        /// Total price for this line item (qty * unitPrice)
        /// </summary>
        [JsonProperty("totalPrice")]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double TotalPrice { get; set; }

        /// <summary>
        /// Price per unit of the product
        /// </summary>
        [JsonProperty("unitPrice")]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double UnitPrice { get; set; }
    }

    public partial class InventoryUpdatedEvent
    {
        public static InventoryUpdatedEvent FromJson(string json) => JsonConvert.DeserializeObject<InventoryUpdatedEvent>(json, InventoryUpdatedEventNameSpace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this InventoryUpdatedEvent self) => JsonConvert.SerializeObject(self, InventoryUpdatedEventNameSpace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<double>(reader);
            if (value >= 0)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (double)untypedValue;
            if (value >= 0)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly MinMaxValueCheckConverter Singleton = new MinMaxValueCheckConverter();
    }
}
