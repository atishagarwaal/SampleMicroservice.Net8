// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OrderUpdatedEventNameSpace;
//
//    var orderUpdatedEvent = OrderUpdatedEvent.FromJson(jsonString);

namespace OrderUpdatedEventNameSpace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OrderUpdatedEvent
    {
        /// <summary>
        /// Fields that were changed
        /// </summary>
        [JsonProperty("changes")]
        public Dictionary<string, object> Changes { get; set; }

        /// <summary>
        /// Unique identifier for the event
        /// </summary>
        [JsonProperty("eventId")]
        public Guid EventId { get; set; }

        /// <summary>
        /// Type of the event
        /// </summary>
        [JsonProperty("eventType")]
        public EventType EventType { get; set; }

        /// <summary>
        /// Unique identifier for the order
        /// </summary>
        [JsonProperty("orderId")]
        public Guid OrderId { get; set; }

        /// <summary>
        /// When the event occurred
        /// </summary>
        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }
    }

    /// <summary>
    /// Type of the event
    /// </summary>
    public enum EventType { OrderUpdated };

    public partial class OrderUpdatedEvent
    {
        public static OrderUpdatedEvent FromJson(string json) => JsonConvert.DeserializeObject<OrderUpdatedEvent>(json, OrderUpdatedEventNameSpace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrderUpdatedEvent self) => JsonConvert.SerializeObject(self, OrderUpdatedEventNameSpace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                EventTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class EventTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EventType) || t == typeof(EventType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "OrderUpdated")
            {
                return EventType.OrderUpdated;
            }
            throw new Exception("Cannot unmarshal type EventType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EventType)untypedValue;
            if (value == EventType.OrderUpdated)
            {
                serializer.Serialize(writer, "OrderUpdated");
                return;
            }
            throw new Exception("Cannot marshal type EventType");
        }

        public static readonly EventTypeConverter Singleton = new EventTypeConverter();
    }
}
