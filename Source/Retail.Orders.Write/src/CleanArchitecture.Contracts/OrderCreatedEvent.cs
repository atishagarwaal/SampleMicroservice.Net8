// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OrderCreatedEventNameSpace;
//
//    var orderCreatedEvent = OrderCreatedEvent.FromJson(jsonString);

namespace OrderCreatedEventNameSpace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OrderCreatedEvent
    {
        /// <summary>
        /// ID of the customer who placed the order
        /// </summary>
        [JsonProperty("customerId")]
        public Guid CustomerId { get; set; }

        /// <summary>
        /// Unique identifier for the event
        /// </summary>
        [JsonProperty("eventId")]
        public Guid EventId { get; set; }

        /// <summary>
        /// Type of the event
        /// </summary>
        [JsonProperty("eventType")]
        public EventType EventType { get; set; }

        /// <summary>
        /// Unique identifier for the order
        /// </summary>
        [JsonProperty("orderId")]
        public Guid OrderId { get; set; }

        /// <summary>
        /// Items in the order
        /// </summary>
        [JsonProperty("orderItems")]
        public OrderItem[] OrderItems { get; set; }

        [JsonProperty("shippingAddress", NullValueHandling = NullValueHandling.Ignore)]
        public ShippingAddress ShippingAddress { get; set; }

        /// <summary>
        /// When the event occurred
        /// </summary>
        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// Total amount of the order
        /// </summary>
        [JsonProperty("totalAmount")]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double TotalAmount { get; set; }
    }

    public partial class OrderItem
    {
        /// <summary>
        /// Unique identifier for the product
        /// </summary>
        [JsonProperty("productId")]
        public Guid ProductId { get; set; }

        /// <summary>
        /// Quantity of the product
        /// </summary>
        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        /// <summary>
        /// Total price for this line item
        /// </summary>
        [JsonProperty("totalPrice", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double? TotalPrice { get; set; }

        /// <summary>
        /// Price per unit
        /// </summary>
        [JsonProperty("unitPrice")]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double UnitPrice { get; set; }
    }

    public partial class ShippingAddress
    {
        /// <summary>
        /// City
        /// </summary>
        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// State or province
        /// </summary>
        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Street address
        /// </summary>
        [JsonProperty("street", NullValueHandling = NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        /// ZIP or postal code
        /// </summary>
        [JsonProperty("zipCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    }

    /// <summary>
    /// Type of the event
    /// </summary>
    public enum EventType { OrderCreated };

    public partial class OrderCreatedEvent
    {
        public static OrderCreatedEvent FromJson(string json) => JsonConvert.DeserializeObject<OrderCreatedEvent>(json, OrderCreatedEventNameSpace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrderCreatedEvent self) => JsonConvert.SerializeObject(self, OrderCreatedEventNameSpace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                EventTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class EventTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EventType) || t == typeof(EventType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "OrderCreated")
            {
                return EventType.OrderCreated;
            }
            throw new Exception("Cannot unmarshal type EventType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EventType)untypedValue;
            if (value == EventType.OrderCreated)
            {
                serializer.Serialize(writer, "OrderCreated");
                return;
            }
            throw new Exception("Cannot marshal type EventType");
        }

        public static readonly EventTypeConverter Singleton = new EventTypeConverter();
    }

    internal class MinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<double>(reader);
            if (value >= 0)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (double)untypedValue;
            if (value >= 0)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly MinMaxValueCheckConverter Singleton = new MinMaxValueCheckConverter();
    }
}
