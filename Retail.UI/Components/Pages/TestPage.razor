@page "/test"
@inject ILogger<TestPage> Logger

<PageTitle>Blazor Test Page</PageTitle>
<link href="css/test.css" rel="stylesheet" />

<script>
    console.log("=== TEST PAGE HTML RENDERED ===");
    console.log("Component HTML is being rendered!");
    
    // Check if Blazor is available
    if (typeof Blazor !== 'undefined') {
        console.log("‚úÖ Blazor object is available");
        console.log("Blazor version:", Blazor.version);
    } else {
        console.log("‚ùå Blazor object is NOT available");
    }
    
    // Check if Blazor Server is running
    if (typeof Blazor !== 'undefined' && Blazor._internal) {
        console.log("‚úÖ Blazor Server internal objects available");
    } else {
        console.log("‚ùå Blazor Server internal objects NOT available");
    }
    
    // Check for SignalR connection
    if (typeof signalR !== 'undefined') {
        console.log("‚úÖ SignalR is available");
    } else {
        console.log("‚ùå SignalR is NOT available");
    }
    
    // Add click event listeners to test if DOM events work
    document.addEventListener('DOMContentLoaded', function() {
        console.log("=== DOM CONTENT LOADED ===");
        
        // Test if we can find the buttons
        const testButton = document.querySelector('button[onclick*="TestButtonClick"]');
        if (testButton) {
            console.log("‚úÖ Test button found in DOM");
            console.log("Button onclick attribute:", testButton.getAttribute('onclick'));
        } else {
            console.log("‚ùå Test button NOT found in DOM");
        }
        
        // Add manual click handler to test if DOM events work
        const counterButton = document.querySelector('button[onclick*="TestCounterIncrement"]');
        if (counterButton) {
            console.log("‚úÖ Counter button found in DOM");
            counterButton.addEventListener('click', function(e) {
                console.log("=== MANUAL CLICK EVENT FIRED ===");
                console.log("Button clicked manually via JavaScript");
                console.log("Event:", e);
                alert("Manual JavaScript click event fired!");
            });
        } else {
            console.log("‚ùå Counter button NOT found in DOM");
        }
        
        // Show alert to confirm component is rendered
        alert("Test page component is rendered! Check console for Blazor status.");
    });
</script>

<div class="test-container">
    <h1>üß™ Blazor Event Test Page</h1>
    <p>This page tests basic Blazor functionality to ensure events are working.</p>
    
    <div class="test-section">
        <h2>Button Click Tests</h2>
        
        <div class="button-group">
            <button class="btn btn-primary" @onclick="TestButtonClick">
                üéØ Test Button Click
            </button>
            
            <button class="btn btn-success" @onclick="TestCounterIncrement">
                üî¢ Increment Counter: @counter
            </button>
            
            <button class="btn btn-warning" @onclick="TestAsyncOperation">
                ‚è±Ô∏è Test Async Operation
            </button>
            
            <button class="btn btn-info" @onclick="TestStateChange">
                üé® Change Color
            </button>
            
            <button class="btn btn-secondary" @onclick="LogComponentState">
                üîç Log State
            </button>
        </div>
        
        <div class="test-results">
            <h3>Test Results:</h3>
            <ul>
                @foreach (var result in testResults)
                {
                    <li class="@result.Type">@result.Message</li>
                }
            </ul>
        </div>
        
        <div class="color-box @currentColor">
            <p>Color changes when you click "Change Color"</p>
        </div>
    </div>
    
    <div class="test-section">
        <h2>Input Binding Tests</h2>
        
        <div class="form-group">
            <label>Text Input:</label>
            <input type="text" class="form-control" @bind="inputText" @bind:event="oninput" />
            <p>You typed: <strong>@inputText</strong></p>
        </div>
        
        <div class="form-group">
            <label>Number Input:</label>
            <input type="number" class="form-control" @bind="inputNumber" />
            <p>Number: <strong>@inputNumber</strong></p>
        </div>
    </div>
    
    <div class="test-section">
        <h2>Navigation Test</h2>
        <a href="/dashboard" class="btn btn-outline-primary">üè† Go to Dashboard</a>
    </div>
</div>

@code {
    private int counter = 0;
    private string inputText = "";
    private int inputNumber = 0;
    private string currentColor = "blue";
    private List<TestResult> testResults = new();
    
    public class TestResult
    {
        public string Message { get; set; } = "";
        public string Type { get; set; } = "info";
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }
    
    // ===== COMPREHENSIVE DEBUG LOGGING =====
    
    protected override void OnInitialized()
    {
        Logger.LogInformation("=== TESTPAGE INITIALIZATION STARTED ===");
        Logger.LogInformation("TestPage.OnInitialized() called at {Timestamp}", DateTime.Now);
        Logger.LogInformation("Component state: counter={Counter}, inputText='{InputText}', inputNumber={InputNumber}", counter, inputText, inputNumber);
        Logger.LogInformation("Test results count: {Count}", testResults.Count);
        
        try
        {
            AddResult("Page loaded successfully", "success");
            Logger.LogInformation("AddResult called successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in AddResult during initialization");
        }
        
        Logger.LogInformation("=== TESTPAGE INITIALIZATION COMPLETED ===");
    }
    
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("=== TESTPAGE ASYNC INITIALIZATION STARTED ===");
        Logger.LogInformation("TestPage.OnInitializedAsync() called at {Timestamp}", DateTime.Now);
        
        try
        {
            await Task.Delay(100); // Small delay to simulate async work
            Logger.LogInformation("Async initialization delay completed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during async initialization");
        }
        
        Logger.LogInformation("=== TESTPAGE ASYNC INITIALIZATION COMPLETED ===");
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogInformation("=== TESTPAGE RENDER EVENT ===");
        Logger.LogInformation("OnAfterRender called - FirstRender: {FirstRender}", firstRender);
        Logger.LogInformation("Current component state: counter={Counter}, color={Color}", counter, currentColor);
        Logger.LogInformation("=== TESTPAGE RENDER EVENT END ===");
    }
    
    // ===== BUTTON EVENT HANDLERS WITH DEBUG LOGGING =====
    
    private void TestButtonClick()
    {
        Logger.LogInformation("=== TEST BUTTON CLICK EVENT STARTED ===");
        Logger.LogInformation("TestButtonClick() method called at {Timestamp}", DateTime.Now);
        Logger.LogInformation("Method execution context: {MethodName}", nameof(TestButtonClick));
        
        try
        {
            Logger.LogInformation("Calling AddResult...");
            AddResult("Button click event fired successfully!", "success");
            Logger.LogInformation("AddResult completed successfully");
            
            Logger.LogInformation("Calling StateHasChanged...");
            StateHasChanged();
            Logger.LogInformation("StateHasChanged completed successfully");
            
            Logger.LogInformation("TestButtonClick completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in TestButtonClick method");
            AddResult($"Error: {ex.Message}", "error");
        }
        
        Logger.LogInformation("=== TEST BUTTON CLICK EVENT COMPLETED ===");
    }
    
    private void TestCounterIncrement()
    {
        Logger.LogInformation("=== COUNTER INCREMENT EVENT STARTED ===");
        Logger.LogInformation("TestCounterIncrement() method called at {Timestamp}", DateTime.Now);
        Logger.LogInformation("Previous counter value: {PreviousCounter}", counter);
        
        try
        {
            counter++;
            Logger.LogInformation("Counter incremented to: {NewCounter}", counter);
            
            Logger.LogInformation("Calling AddResult...");
            AddResult($"Counter incremented to {counter}", "info");
            Logger.LogInformation("AddResult completed successfully");
            
            Logger.LogInformation("Calling StateHasChanged...");
            StateHasChanged();
            Logger.LogInformation("StateHasChanged completed successfully");
            
            Logger.LogInformation("TestCounterIncrement completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in TestCounterIncrement method");
            AddResult($"Error: {ex.Message}", "error");
        }
        
        Logger.LogInformation("=== COUNTER INCREMENT EVENT COMPLETED ===");
    }
    
    private async Task TestAsyncOperation()
    {
        Logger.LogInformation("=== ASYNC OPERATION EVENT STARTED ===");
        Logger.LogInformation("TestAsyncOperation() method called at {Timestamp}", DateTime.Now);
        Logger.LogInformation("Async method context: {MethodName}", nameof(TestAsyncOperation));
        
        try
        {
            Logger.LogInformation("Calling AddResult for operation start...");
            AddResult("Async operation started...", "info");
            Logger.LogInformation("AddResult for start completed");
            
            Logger.LogInformation("Starting async delay...");
            await Task.Delay(1000); // Simulate async work
            Logger.LogInformation("Async delay completed");
            
            Logger.LogInformation("Calling AddResult for operation completion...");
            AddResult("Async operation completed successfully!", "success");
            Logger.LogInformation("AddResult for completion completed");
            
            Logger.LogInformation("Calling StateHasChanged...");
            StateHasChanged();
            Logger.LogInformation("StateHasChanged completed successfully");
            
            Logger.LogInformation("TestAsyncOperation completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in TestAsyncOperation method");
            AddResult($"Error: {ex.Message}", "error");
        }
        
        Logger.LogInformation("=== ASYNC OPERATION EVENT COMPLETED ===");
    }
    
    private void TestStateChange()
    {
        Logger.LogInformation("=== STATE CHANGE EVENT STARTED ===");
        Logger.LogInformation("TestStateChange() method called at {Timestamp}", DateTime.Now);
        Logger.LogInformation("Previous color: {PreviousColor}", currentColor);
        
        try
        {
            var colors = new[] { "red", "blue", "green", "purple", "orange" };
            var random = new Random();
            var newColor = colors[random.Next(colors.Length)];
            
            Logger.LogInformation("Random color selected: {NewColor}", newColor);
            currentColor = newColor;
            Logger.LogInformation("Color updated to: {CurrentColor}", currentColor);
            
            Logger.LogInformation("Calling AddResult...");
            AddResult($"Color changed to {currentColor}", "warning");
            Logger.LogInformation("AddResult completed successfully");
            
            Logger.LogInformation("Calling StateHasChanged...");
            StateHasChanged();
            Logger.LogInformation("StateHasChanged completed successfully");
            
            Logger.LogInformation("TestStateChange completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in TestStateChange method");
            AddResult($"Error: {ex.Message}", "error");
        }
        
        Logger.LogInformation("=== STATE CHANGE EVENT COMPLETED ===");
    }
    
    // ===== INPUT BINDING EVENT HANDLERS =====
    
    private void OnInputTextChanged(string value)
    {
        Logger.LogInformation("=== INPUT TEXT CHANGE EVENT ===");
        Logger.LogInformation("OnInputTextChanged called with value: '{Value}'", value);
        Logger.LogInformation("Previous inputText: '{PreviousText}'", inputText);
        
        inputText = value;
        Logger.LogInformation("inputText updated to: '{NewText}'", inputText);
        
        Logger.LogInformation("=== INPUT TEXT CHANGE EVENT END ===");
    }
    
    private void OnInputNumberChanged(int value)
    {
        Logger.LogInformation("=== INPUT NUMBER CHANGE EVENT ===");
        Logger.LogInformation("OnInputNumberChanged called with value: {Value}", value);
        Logger.LogInformation("Previous inputNumber: {PreviousNumber}", inputNumber);
        
        inputNumber = value;
        Logger.LogInformation("inputNumber updated to: {NewNumber}", inputNumber);
        
        Logger.LogInformation("=== INPUT NUMBER CHANGE EVENT END ===");
    }
    
    // ===== UTILITY METHODS WITH DEBUG LOGGING =====
    
    private void AddResult(string message, string type)
    {
        Logger.LogInformation("=== ADD RESULT METHOD CALLED ===");
        Logger.LogInformation("AddResult called with message: '{Message}', type: '{Type}'", message, type);
        Logger.LogInformation("Current testResults count: {CurrentCount}", testResults.Count);
        
        try
        {
            var newResult = new TestResult 
            { 
                Message = message, 
                Type = type, 
                Timestamp = DateTime.Now 
            };
            
            Logger.LogInformation("TestResult object created: {Result}", newResult.Message);
            
            testResults.Insert(0, newResult);
            Logger.LogInformation("Result inserted at index 0");
            
            Logger.LogInformation("New testResults count: {NewCount}", testResults.Count);
            
            // Keep only last 10 results
            if (testResults.Count > 10)
            {
                var removedCount = testResults.Count - 10;
                testResults.RemoveRange(10, removedCount);
                Logger.LogInformation("Removed {RemovedCount} old results, keeping only 10", removedCount);
            }
            
            Logger.LogInformation("AddResult completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in AddResult method");
        }
        
        Logger.LogInformation("=== ADD RESULT METHOD COMPLETED ===");
    }
    
    // ===== COMPONENT STATE INSPECTION =====
    
    public void LogComponentState()
    {
        Logger.LogInformation("=== COMPONENT STATE INSPECTION ===");
        Logger.LogInformation("Counter: {Counter}", counter);
        Logger.LogInformation("InputText: '{InputText}'", inputText);
        Logger.LogInformation("InputNumber: {InputNumber}", inputNumber);
        Logger.LogInformation("CurrentColor: {CurrentColor}", currentColor);
        Logger.LogInformation("TestResults count: {TestResultsCount}", testResults.Count);
        Logger.LogInformation("=== COMPONENT STATE INSPECTION END ===");
    }
}
